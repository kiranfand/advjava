http://localhost:8080/swagger-ui/index.html

1) com.app
                       i) Application
package com.app;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

@SpringBootApplication
public class Application {
	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}
	@Bean 
	public ModelMapper myModelMapper() {
		ModelMapper mapper = new ModelMapper();
		mapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
		return mapper;
	}
}
--------------------------------------

2)com.app.controller
	i) EmployeeController
package com.app.controller;
import java.util.List;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.app.dto.ApiResponse;
import com.app.dto.AuthRequestDTO;
import com.app.entities.Employee;
import com.app.service.EmployeeService;
@RestController 
@RequestMapping("/employees")
@CrossOrigin(origins = "http://localhost:3000")
public class EmployeeController {
	@Autowired
	private EmployeeService empService;
	public EmployeeController() {
		System.out.println("in def ctor of " + getClass());
	}
	@GetMapping
	public List<Employee> listEmps() {
		System.out.println("in list emps");
		return empService.getAllEmployees();
	}
	@PostMapping
	public ResponseEntity<?> saveEmpDetails(@RequestBody Employee transientEmp) {
		System.out.println("in save " + transientEmp);// not null , id : null
		return new ResponseEntity<>(empService.addEmpDetails(transientEmp), HttpStatus.CREATED);
	}
	@DeleteMapping("/{empId}")
	public ApiResponse deleteEmpDetails(@PathVariable Long empId) {
		System.out.println("in del emp dtls " + empId);
		return new ApiResponse(empService.deleteEmpDetails(empId));
	}
	@GetMapping("/{empId}")
	public Employee getEmpDetails(@PathVariable Long empId) {
		System.out.println("in get emp dtls " + empId);
		return empService.getEmpDetails(empId);
	}
	@PutMapping
	public Employee updateEmpDetails(@RequestBody Employee detachedEmp) {
		System.out.println("in update emp " + detachedEmp);
		return empService.updateEmpDetails(detachedEmp);
	}
	@PostMapping("/signin")
	public ResponseEntity<?> authenticateEmp(@RequestBody @Valid AuthRequestDTO request) {
		System.out.println("in auth emp " + request);

		return ResponseEntity.status(HttpStatus.OK)
				.body(empService.authenticateEmp(request));
	}
}
###########
	ii) HomePageController
package com.app.controller;
import java.util.Arrays;
import java.util.List;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
@RestController
public class HomePageController {
	public HomePageController() {
		System.out.println("in ctor of " + getClass());
	}
	@GetMapping("/")
	public List<Integer> getNumberList() {
		System.out.println("in get number list");
		return Arrays.asList(10,20,30,40);
	}
}
--------------------------------------
3)com.app.custom_exceptions
	i)ResourceNotFoundException
package com.app.custom_exceptions;
public class ResourceNotFoundException extends RuntimeException {
	public ResourceNotFoundException(String mesg) {
		super(mesg);
	}
}
--------------------------------------
4)com.app.dto
	i)ApiResponse
package com.app.dto;
import java.time.LocalDateTime;
import lombok.Getter;
@Getter
public class ApiResponse {
	private String message;
	private LocalDateTime timestamp;
	public ApiResponse(String message) {
		super();
		this.message = message;
		this.timestamp=LocalDateTime.now();
	}
	
	
}
#######################
	ii)AuthRequestDTO
package com.app.dto;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
@Setter 
@Getter 
@ToString 
public class AuthRequestDTO {
	@NotBlank(message ="Email can't be blank!!!" )
	@Email(message = "Invalid email format!!!!!")
	private String email;
	@NotBlank(message = "Password is required!!!")
	private String password;
}
#################

	iii)AuthRespDTO
package com.app.dto;
import java.time.LocalDate;
import lombok.Getter;
import lombok.Setter;
@Getter
@Setter
public class AuthRespDTO {	
	private String firstName;	
	private String lastName;	
	private LocalDate joinDate;
	private double salary;	
	private String location;	
	private String department;
}
--------------------------------------
5)com.app.entities
	i)BaseEntity
package com.app.entities;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.MappedSuperclass;
import lombok.Getter;
import lombok.Setter;
@MappedSuperclass 
@Getter
@Setter
public class BaseEntity {
	@Id 
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;	
}
#################
	ii)Employee
package com.app.entities;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Entity
@Table(name = "emp") 
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@ToString(exclude = "password")
public class Employee extends BaseEntity {
	@Column(name = "first_name", length = 20) 
	private String firstName;
	@Column(name = "last_name", length = 20)
	private String lastName;
	@Column(length = 30, unique = true) 
	private String email;
	@Column(length = 20, nullable = false) 
	private String password;
	@Column(name = "join_date")
	private LocalDate joinDate;
	private double salary;
	@Column(length = 30)
	private String location;
	@Column(length = 30)
	private String department;
	private String imagePath;
	public Employee(String firstName, String lastName, String email, String password, LocalDate joinDate, double salary,
			String location, String department) {
		super();
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.password = password;
		this.joinDate = joinDate;
		this.salary = salary;
		this.location = location;
		this.department = department;
	}
}

--------------------------------------
6)com.app.exception_handler
	i)GlobalExceptionHandler
package com.app.exception_handler;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import com.app.custom_exceptions.ResourceNotFoundException;
import com.app.dto.ApiResponse;
@RestControllerAdvice 
public class GlobalExceptionHandler {
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public ResponseEntity<?> handleMethodArgumentNotValidException(MethodArgumentNotValidException e) {
		Map<String, String> map = new HashMap<>();
		for (FieldError f : e.getFieldErrors())
			map.put(f.getField(), f.getDefaultMessage());
		return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(map);
	}
	@ExceptionHandler(ResourceNotFoundException.class)
	public ResponseEntity<?> handleResourceNotFoundException(ResourceNotFoundException e) {
		System.out.println("handle res not found "+e);
		return ResponseEntity
				.status(HttpStatus.NOT_FOUND)
				.body(new ApiResponse(e.getMessage()));		
	}
}

--------------------------------------
7)com.app.repository
	i)EmployeeRepository
package com.app.repository;
import java.util.Optional;
import org.springframework.data.jpa.repository.JpaRepository;
import com.app.entities.Employee;
public interface EmployeeRepository extends JpaRepository<Employee, Long> {
	Optional<Employee> findByEmailAndPassword(String em, String pass);
}

--------------------------------------
8)com.app.service
	i)EmployeeService
package com.app.service;
import java.util.List;
import com.app.dto.AuthRequestDTO;
import com.app.dto.AuthRespDTO;
import com.app.entities.Employee;
public interface EmployeeService {
	List<Employee> getAllEmployees();
	Employee addEmpDetails(Employee transientEmp);
	String deleteEmpDetails(Long empId);
	Employee getEmpDetails(Long empId);
	Employee updateEmpDetails(Employee detachedEmp);
	AuthRespDTO authenticateEmp(AuthRequestDTO request);
}

##############
	ii)EmployeeServiceImpl
package com.app.service;
import java.util.List;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.app.custom_exceptions.ResourceNotFoundException;
import com.app.dto.AuthRequestDTO;
import com.app.dto.AuthRespDTO;
import com.app.entities.Employee;
import com.app.repository.EmployeeRepository;
@Service
@Transactional
public class EmployeeServiceImpl implements EmployeeService {
	@Autowired 
	private EmployeeRepository empRepo;
	@Autowired 
	private ModelMapper mapper;
	@Override
	public List<Employee> getAllEmployees() {
		return empRepo.findAll();
	}
	@Override
	public Employee addEmpDetails(Employee transientEmp) {
		return empRepo.save(transientEmp);
	}
	@Override
	public String deleteEmpDetails(Long empId) {
		String mesg = "Emp id invalid , can't delete emp details ";
		if (empRepo.existsById(empId)) {
			empRepo.deleteById(empId);
			mesg = "Emp with ID=" + empId + "  deleted !";
		}
		return mesg;
	}
	@Override
	public Employee getEmpDetails(Long empId) {
		return empRepo.findById(empId)
				.orElseThrow(() -> new ResourceNotFoundException("Invalid Emp ID , Can't get emp details!!!!"));
	}
	@Override
	public Employee updateEmpDetails(Employee detachedEmp) {
		return empRepo.save(detachedEmp);
	}
	@Override
	public AuthRespDTO authenticateEmp(AuthRequestDTO request) {
		Employee emp = empRepo.findByEmailAndPassword(request.getEmail(), request.getPassword())
				.orElseThrow(() -> new ResourceNotFoundException("Emp not found : Invalid Email or password"));
		AuthRespDTO authRespDTO = mapper.map(emp, AuthRespDTO.class);
		return authRespDTO;
	}
}

###################
	iii)ImageHandlingService
package com.app.service;
import org.springframework.web.multipart.MultipartFile;
import com.app.dto.ApiResponse;
public interface ImageHandlingService {
	ApiResponse uploadImageToFolder(Long empId, MultipartFile file);
}

#################
	iv)ImageHandlingServiceImpl
package com.app.service;
import java.io.File;
import javax.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import com.app.dto.ApiResponse;
import com.app.repository.EmployeeRepository;
@Service
@Transactional
public class ImageHandlingServiceImpl implements ImageHandlingService {
	@Autowired
	private EmployeeRepository empRepo;
	@Value("${upload.location}")
	private String uploadFolder;
	@PostConstruct
	public void myInit()
	{
		System.out.println("in init "+uploadFolder);
		File dir=new File(uploadFolder);
		if(dir.exists())
			System.out.println("folder alrdy exists !!!!");
		else  {
			dir.mkdirs();
			System.out.println("created a new folder");
		}
	}
	@Override
	public ApiResponse uploadImageToFolder(Long empId, MultipartFile file) {
		return null;
	}
}

--------------------------------------

	
	